<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

require 'gevent.api.php';
\Drupal::moduleHandler()->loadInclude('gevent', 'inc', 'gevent.theme');

function gevent_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
        case 'help.page.gevent':
            $output = '<p>本模組將為您新增「行事曆事件」內容類型，編輯事件時會自動同步到 G Suite，並提供「學校行事曆」頁面。</p>';

            return $output;
    }
}

function gevent_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    $config = \Drupal::config('gevent.settings');
    if ($config->get('enable')) {
        $node = $form_state->getFormObject()->getEntity();
        if ($node->get('type')->value == $config->get('content_type')) {
            unset($form[$config->get('field_calendar_id')]);
            unset($form[$config->get('field_event_id')]);
        }
    }
}

function gevent_node_insert(EntityInterface $node)
{
    $config = \Drupal::config('gevent.settings');
    if ($config->get('enable') && $node->get('type')->value == $config->get('content_type')) {
        $event = gs_syncEvent($node);

        $calendar_id = $event->getOrganizer()->getEmail();
        $event_id = $event->getId();
        $node->set($config->get('field_calendar_id'), $claendar_id);
        $node->set($config->get('field_event_id'), $event_id);
        $node->save();
    }
}

function gevent_node_update(EntityInterface $node)
{
    $config = \Drupal::config('gevent.settings');
    if ($config->get('enable') && $node->get('type')->value == $config->get('content_type')) {
        $event = gs_syncEvent($node);

        $calendar_id = $event->getOrganizer()->getEmail();
        $event_id = $event->getId();
        $node->set($config->get('field_calendar_id'), $claendar_id);
        $node->set($config->get('field_event_id'), $event_id);
        $node->save();
    }
}

function gevent_node_delete(EntityInterface $node)
{
    $config = \Drupal::config('gevent.settings');
    if ($config->get('enable') && $node->get('type')->value == $config->get('content_type')) {
        $calendar_id_field = $config->get('field_calendar_id');
        if (substr($calendar_id_field, 0, 6) == 'field_') {
            $calendar_id_obj = $node->$calendar_id_field;
            if (isset($calendar_id_obj['und'][0])) {
                $calendar_id = $calendar_id_obj['und'][0]['value'];
            }
        } else {
            $calendar_id = $node->$calendar_id_field;
        }
        $event_id_field = $config->get('field_event_id');
        if (substr($event_id_field, 0, 6) == 'field_') {
            $event_id_obj = $node->$event_id_field;
            if (isset($event_id_obj['und'][0])) {
                $event_id = $event_id_obj['und'][0]['value'];
            }
        } else {
            $event_id = $node->$event_id_field;
        }
        gs_deleteEvent($calendar_id, $event_id);
    }
}

function gevent_theme()
{
    return [
        'fullcalendar' => [
            'file' => 'gevent.theme.inc',
        ],
        'gevent_todolist' => [
            'variables' => [
                'title' => '學校行事曆',
                'syear' => 0,
                'eyear' => 0,
                'seme' => 0,
                'events' => [],
            ],
        ],
    ];
}

function gevent_library_info_alter(array &$libraries, $module)
{
    if ('gevent' == $module) {
        // Use CDN instead of all local missing libraries.
        // JSFrame.js
        $cdn_library = _gevent_use_cdn_full_path($libraries, 'libraries.jsframe', 'js');
        if ($cdn_library) {
            $libraries['libraries.jsframe']['js'] = $cdn_library;
        }
        // Moment.js
        $cdn_library = _gevent_use_cdn_full_path($libraries, 'libraries.moment', 'js');
        if ($cdn_library) {
            $libraries['libraries.moment']['js'] = $cdn_library;
        }
        // RRule js.
        $cdn_library = _gevent_use_cdn_full_path($libraries, 'libraries.rrule', 'js');
        if ($cdn_library) {
            $libraries['libraries.rrule']['js'] = $cdn_library;
        }
        // Fullcalendar default theme.
        $cdn_library = _gevent_use_cdn($libraries, 'libraries.fullcalendar-theme', 'css');
        if ($cdn_library) {
            $libraries['libraries.fullcalendar-theme']['css']['component'] = $cdn_library;
        }
        // Fullcalendar js.
        $cdn_library = _gevent_use_cdn($libraries, 'libraries.fullcalendar', 'js');
        if ($cdn_library) {
            $libraries['libraries.fullcalendar']['js'] = $cdn_library;
        }
    }
}

/**
 * Replace local library with CDN.
 *
 * @param array  $libraries
 *                              The libraries array
 * @param string $library_name
 *                              The library name
 * @param string $type
 *                              The library type
 * @param bool   $replace_local
 *                              Force to replace local libraries with CDN
 *
 * @return array
 *               The new library array (CDN)
 */
function _gevent_use_cdn(array $libraries, $library_name, $type, $replace_local = false)
{
    if (isset($libraries[$library_name])) {
        if (isset($libraries[$library_name][$type]) && isset($libraries[$library_name]['cdn'])) {
            $library_array = [];
            $updated = false;
            // CSS library has a sub-array called component.
            if ($type === 'css') {
                if (isset($libraries[$library_name][$type]['component'])) {
                    $local_library = $libraries[$library_name][$type]['component'];
                } else {
                    return false;
                }
            } else {
                // Local js library.
                $local_library = $libraries[$library_name][$type];
            }
            foreach ($local_library as $key => $value) {
                if (!file_exists(DRUPAL_ROOT.$key) || $replace_local) {
                    // The js file doesn't exist.
                    // Replace it with remote cdn.
                    $path = explode('/', $key);
                    $end = count($path);
                    $plugin_url = $path[$end - 2].'@'.$libraries[$library_name]['version'].'/'.$path[$end - 1];
                    $library_array[$libraries[$library_name]['cdn'].$plugin_url] = $value;
                    $updated = true;
                } else {
                    $library_array[$key] = $value;
                }
            }
        }
    }

    return empty($updated) ? false : $library_array;
}

  /**
   * Replace local rrule library with CDN.
   *
   * @param array  $libraries
   *                              The libraries array
   * @param string $library_name
   *                              The library name
   * @param string $type
   *                              The library type
   * @param bool   $replace_local
   *                              Force to replace local libraries with CDN
   *
   * @return array
   *               The new library array (CDN)
   */
  function _gevent_use_cdn_full_path(array $libraries, $library_name, $type, $replace_local = false)
  {
      if (isset($libraries[$library_name])) {
          if (isset($libraries[$library_name][$type]) && isset($libraries[$library_name]['cdn'])) {
              $library_array = [];
              $updated = false;
              // CSS library has a sub-array called component.
              if ($type === 'css') {
                  if (isset($libraries[$library_name][$type]['component'])) {
                      $local_library = $libraries[$library_name][$type]['component'];
                  } else {
                      return false;
                  }
              } else {
                  // Local js library.
                  $local_library = $libraries[$library_name][$type];
              }
              foreach ($local_library as $key => $value) {
                  if (!file_exists(DRUPAL_ROOT.$key) || $replace_local) {
                      // The js file doesn't exist.
                      // Replace it with remote cdn.
                      $library_array[$libraries[$library_name]['cdn']] = $value;
                      $updated = true;
                  } else {
                      $library_array[$key] = $value;
                  }
              }
          }
      }

      return empty($updated) ? false : $library_array;
  }
